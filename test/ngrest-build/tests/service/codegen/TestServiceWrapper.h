// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest
// DO NOT EDIT. ANY CHANGES WILL BE LOST

#ifndef NGREST_TESTSERVICEWRAPPER_H
#define NGREST_TESTSERVICEWRAPPER_H

#include <string>

#include <ngrest/engine/ServiceWrapper.h>
#include "TestService.h"


namespace ngrest {


class TestService;

//! TestService service wrapper
class TestServiceWrapper: public ::ngrest::ServiceWrapper
{
public:
    TestServiceWrapper();
    virtual ~TestServiceWrapper();

    virtual ::ngrest::Service* getServiceImpl() override;

    virtual void invoke(const ::ngrest::OperationDescription* operation, ::ngrest::MessageContext* context) override;

    virtual const ::ngrest::ServiceDescription* getDescription() const override;

private:
    TestService* service;
};



struct ValTypeSerializer
{
    static const char* toCString(ValType value);
    static ValType fromCString(const char* str);
};

struct TestTypedefSerializer
{
    static void serialize(::ngrest::MessageContext* context, const TestTypedef& value, ::ngrest::Node*& node);
    static void deserialize(const ::ngrest::Node* node, TestTypedef& value);
};

struct StringMapSerializer
{
    static void serialize(::ngrest::MessageContext* context, const StringMap& value, ::ngrest::Node*& node);
    static void deserialize(const ::ngrest::Node* node, StringMap& value);
};

struct StringListSerializer
{
    static void serialize(::ngrest::MessageContext* context, const StringList& value, ::ngrest::Node*& node);
    static void deserialize(const ::ngrest::Node* node, StringList& value);
};

struct TestSerializer
{
    struct NestedSerializer
    {
        static void serialize(::ngrest::MessageContext* context, const Test::Nested& value, ::ngrest::Node* node);
        static void deserialize(const ::ngrest::Node* node, Test::Nested& value);
    };


    struct TestEnumSerializer
    {
        static const char* toCString(Test::TestEnum value);
        static Test::TestEnum fromCString(const char* str);
    };


    static void serialize(::ngrest::MessageContext* context, const Test& value, ::ngrest::Node* node);
    static void deserialize(const ::ngrest::Node* node, Test& value);
};

struct TestChildSerializer
{
    static void serialize(::ngrest::MessageContext* context, const TestChild& value, ::ngrest::Node* node);
    static void deserialize(const ::ngrest::Node* node, TestChild& value);
};

struct TestPtrSerializer
{
    static void serialize(::ngrest::MessageContext* context, const TestPtr& value, ::ngrest::Node* node);
    static void deserialize(const ::ngrest::Node* node, TestPtr& value);
};

}


#endif // NGREST_TESTSERVICEWRAPPER_H

