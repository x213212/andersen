<?xml version="1.0" encoding="UTF-8" ?>
<project>
  <name>project1</name>
  <ns>::ngrest::</ns>
  <nsName>::ngrest::project1</nsName>
  <startCppNs>namespace ngrest {
</startCppNs>
  <endCppNs>}
</endCppNs>
  <interfaces>
    <interface>
      <name>TestService</name>
      <ns>::ngrest::</ns>
      <nsName>::ngrest::TestService</nsName>
      <fileName>TestService.h</fileName>
      <filePath/>
      <options/>
      <includes/>
      <enums>
        <enum>
          <name>ValType</name>
          <nsName>::ngrest::ValType</nsName>
          <ns>::ngrest::</ns>
          <owner/>
          <ownerName>ValType</ownerName>
          <description/>
          <details/>
          <isExtern>false</isExtern>
          <members>
            <member>
              <name>Zero</name>
              <value/>
              <description/>
            </member>
            <member>
              <name>One</name>
              <value/>
              <description/>
            </member>
            <member>
              <name>Two</name>
              <value/>
              <description/>
            </member>
          </members>
          <startCppNs>namespace ngrest {
</startCppNs>
          <endCppNs>}
</endCppNs>
          <options/>
        </enum>
      </enums>
      <structs>
        <struct>
          <name>Test</name>
          <nsName>::ngrest::Test</nsName>
          <ns>::ngrest::</ns>
          <owner/>
          <ownerName>Test</ownerName>
          <parentName/>
          <parentUsedName/>
          <parentNs/>
          <parentNsName/>
          <description/>
          <details/>
          <isExtern>false</isExtern>
          <fields>
            <field>
              <name>a</name>
              <description/>
              <details/>
              <options/>
              <dataType>int
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>int</usedName>
                <name>int</name>
                <nsName>int</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>int</usedTypedef>
                <templateParams/>
              </dataType>
            </field>int a, std::string b, TestEnum testEnum, Nested n, std::list&lt;std::string&gt; ls
            <field>
              <name>b</name>
              <description/>
              <details/>
              <options/>
              <dataType>std::string
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::string</usedName>
                <name>string</name>
                <nsName>std::string</nsName>
                <ns>std::</ns>
                <type>string</type>
                <usedTypedef>std::string</usedTypedef>
                <templateParams/>
              </dataType>
            </field>
            <field>
              <name>testEnum</name>
              <description/>
              <details/>
              <options/>
              <dataType>::ngrest::Test::TestEnum
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>TestEnum</usedName>
                <name>Test::TestEnum</name>
                <nsName>::ngrest::Test::TestEnum</nsName>
                <ns>::ngrest::</ns>
                <type>enum</type>
                <usedTypedef>TestEnum</usedTypedef>
                <templateParams/>
              </dataType>
            </field>
            <field>
              <name>n</name>
              <description/>
              <details/>
              <options/>
              <dataType>::ngrest::Test::Nested
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>Nested</usedName>
                <name>Test::Nested</name>
                <nsName>::ngrest::Test::Nested</nsName>
                <ns>::ngrest::</ns>
                <type>struct</type>
                <usedTypedef>Nested</usedTypedef>
                <templateParams/>
              </dataType>
            </field>
            <field>
              <name>ls</name>
              <description/>
              <details/>
              <options/>
              <dataType>std::list&lt;std::string&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt;std::string&gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt;std::string&gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt;std::string&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
              </dataType>
            </field>
          </fields>
          <startCppNs>namespace ngrest {
</startCppNs>
          <endCppNs>}
</endCppNs>
          <options/>
          <enums>
            <enum>
              <name>TestEnum</name>
              <nsName>::ngrest::Test::TestEnum</nsName>
              <ns>::ngrest::</ns>
              <owner>Test</owner>
              <ownerName>Test::TestEnum</ownerName>
              <description/>
              <details/>
              <isExtern>false</isExtern>
              <members>
                <member>
                  <name>Some</name>
                  <value/>
                  <description/>
                </member>
                <member>
                  <name>Values</name>
                  <value/>
                  <description/>
                </member>
                <member>
                  <name>Here</name>
                  <value/>
                  <description/>
                </member>
              </members>
              <startCppNs>namespace ngrest {
</startCppNs>
              <endCppNs>}
</endCppNs>
              <options/>
            </enum>
          </enums>
          <structs>
            <struct>
              <name>Nested</name>
              <nsName>::ngrest::Test::Nested</nsName>
              <ns>::ngrest::</ns>
              <owner>Test</owner>
              <ownerName>Test::Nested</ownerName>
              <parentName/>
              <parentUsedName/>
              <parentNs/>
              <parentNsName/>
              <description/>
              <details/>
              <isExtern>false</isExtern>
              <fields>
                <field>
                  <name>b</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>bool
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>bool</usedName>
                    <name>bool</name>
                    <nsName>bool</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>bool</usedTypedef>
                    <templateParams/>
                  </dataType>
                </field>bool b
              </fields>
              <startCppNs>namespace ngrest {
</startCppNs>
              <endCppNs>}
</endCppNs>
              <options/>
              <enums/>
              <structs/>
            </struct>
          </structs>
        </struct>
        <struct>
          <name>TestChild</name>
          <nsName>::ngrest::TestChild</nsName>
          <ns>::ngrest::</ns>
          <owner/>
          <ownerName>TestChild</ownerName>
          <parentName>Test</parentName>
          <parentUsedName>Test</parentUsedName>
          <parentNs>::ngrest::</parentNs>
          <parentNsName>::ngrest::Test</parentNsName>
          <description/>
          <details/>
          <isExtern>false</isExtern>
          <fields>
            <field>
              <name>isSomething</name>
              <description/>
              <details/>
              <options/>
              <dataType>bool
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>bool</usedName>
                <name>bool</name>
                <nsName>bool</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>bool</usedTypedef>
                <templateParams/>
              </dataType>
            </field>bool isSomething
          </fields>
          <startCppNs>namespace ngrest {
</startCppNs>
          <endCppNs>}
</endCppNs>
          <options/>
          <enums/>
          <structs/>
        </struct>
        <struct>
          <name>TestPtr</name>
          <nsName>::ngrest::TestPtr</nsName>
          <ns>::ngrest::</ns>
          <owner/>
          <ownerName>TestPtr</ownerName>
          <parentName/>
          <parentUsedName/>
          <parentNs/>
          <parentNsName/>
          <description/>
          <details/>
          <isExtern>false</isExtern>
          <fields>
            <field>
              <name>intValue</name>
              <description/>
              <details/>
              <options/>
              <dataType>ngrest::Nullable&lt;int&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;int&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt;int&gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;int&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
              </dataType>
            </field>ngrest::Nullable&lt;int&gt; intValue, ngrest::Nullable&lt;ValType&gt; enumValue, ngrest::Nullable&lt;std::string&gt; strValue, ngrest::Nullable&lt;Test&gt; structValue, ngrest::Nullable&lt; std::list&lt;std::string&gt; &gt; listValue, ngrest::Nullable&lt; std::map&lt;int, std::string&gt; &gt; mapValue
            <field>
              <name>enumValue</name>
              <description/>
              <details/>
              <options/>
              <dataType>ngrest::Nullable&lt; ::ngrest::ValType &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;ValType&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt; ::ngrest::ValType &gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;ValType&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>::ngrest::ValType
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ValType</usedName>
                    <name>ValType</name>
                    <nsName>::ngrest::ValType</nsName>
                    <ns>::ngrest::</ns>
                    <type>enum</type>
                    <usedTypedef>ValType</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
              </dataType>
            </field>
            <field>
              <name>strValue</name>
              <description/>
              <details/>
              <options/>
              <dataType>ngrest::Nullable&lt;std::string&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;std::string&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt;std::string&gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;std::string&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
              </dataType>
            </field>
            <field>
              <name>structValue</name>
              <description/>
              <details/>
              <options/>
              <dataType>ngrest::Nullable&lt; ::ngrest::Test &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;Test&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt; ::ngrest::Test &gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;Test&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>::ngrest::Test
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>Test</usedName>
                    <name>Test</name>
                    <nsName>::ngrest::Test</nsName>
                    <ns>::ngrest::</ns>
                    <type>struct</type>
                    <usedTypedef>Test</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
              </dataType>
            </field>
            <field>
              <name>listValue</name>
              <description/>
              <details/>
              <options/>
              <dataType>ngrest::Nullable&lt; std::list&lt;std::string&gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt; std::list&lt;std::string&gt; &gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt; std::list&lt;std::string&gt; &gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt; std::list&lt;std::string&gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::list&lt;std::string&gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::list&lt;std::string&gt;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt;std::string&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::list&lt;std::string&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </templateParam1>
                </templateParams>
              </dataType>
            </field>
            <field>
              <name>mapValue</name>
              <description/>
              <details/>
              <options/>
              <dataType>ngrest::Nullable&lt; std::map&lt;int, std::string&gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt; std::map&lt;int, std::string&gt; &gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt; std::map&lt;int, std::string&gt; &gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt; std::map&lt;int, std::string&gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::map&lt;int, std::string&gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::map&lt;int, std::string&gt;</usedName>
                    <name>map</name>
                    <nsName>std::map&lt;int, std::string&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::map&lt;int, std::string&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                      <templateParam2>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam2>
                    </templateParams>
                  </templateParam1>
                </templateParams>
              </dataType>
            </field>
          </fields>
          <startCppNs>namespace ngrest {
</startCppNs>
          <endCppNs>}
</endCppNs>
          <options/>
          <enums/>
          <structs/>
        </struct>
      </structs>
      <typedefs>
        <typedef>
          <name>TestTypedef</name>
          <nsName>::ngrest::TestTypedef</nsName>
          <ns>::ngrest::</ns>
          <description/>
          <details/>
          <dataType>::ngrest::Test
            <isConst>false</isConst>
            <isRef>false</isRef>
            <usedName>Test</usedName>
            <name>Test</name>
            <nsName>::ngrest::Test</nsName>
            <ns>::ngrest::</ns>
            <type>struct</type>
            <usedTypedef>Test</usedTypedef>
            <templateParams/>
          </dataType>
          <isExtern>false</isExtern>
          <startCppNs>namespace ngrest {
</startCppNs>
          <endCppNs>}
</endCppNs>
          <options/>
        </typedef>
        <typedef>
          <name>StringMap</name>
          <nsName>::ngrest::StringMap</nsName>
          <ns>::ngrest::</ns>
          <description/>
          <details/>
          <dataType>std::map&lt;std::string, std::string&gt;
            <isConst>false</isConst>
            <isRef>false</isRef>
            <usedName>std::map&lt;std::string, std::string&gt;</usedName>
            <name>map</name>
            <nsName>std::map&lt;std::string, std::string&gt;</nsName>
            <ns>std::</ns>
            <type>template</type>
            <usedTypedef>std::map&lt;std::string, std::string&gt;</usedTypedef>
            <templateParams>
              <templateParam1>std::string
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::string</usedName>
                <name>string</name>
                <nsName>std::string</nsName>
                <ns>std::</ns>
                <type>string</type>
                <usedTypedef>std::string</usedTypedef>
                <templateParams/>
              </templateParam1>
              <templateParam2>std::string
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::string</usedName>
                <name>string</name>
                <nsName>std::string</nsName>
                <ns>std::</ns>
                <type>string</type>
                <usedTypedef>std::string</usedTypedef>
                <templateParams/>
              </templateParam2>
            </templateParams>
          </dataType>
          <isExtern>false</isExtern>
          <startCppNs>namespace ngrest {
</startCppNs>
          <endCppNs>}
</endCppNs>
          <options/>
        </typedef>
        <typedef>
          <name>StringList</name>
          <nsName>::ngrest::StringList</nsName>
          <ns>::ngrest::</ns>
          <description/>
          <details/>
          <dataType>std::list&lt;std::string&gt;
            <isConst>false</isConst>
            <isRef>false</isRef>
            <usedName>std::list&lt;std::string&gt;</usedName>
            <name>list</name>
            <nsName>std::list&lt;std::string&gt;</nsName>
            <ns>std::</ns>
            <type>template</type>
            <usedTypedef>std::list&lt;std::string&gt;</usedTypedef>
            <templateParams>
              <templateParam1>std::string
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::string</usedName>
                <name>string</name>
                <nsName>std::string</nsName>
                <ns>std::</ns>
                <type>string</type>
                <usedTypedef>std::string</usedTypedef>
                <templateParams/>
              </templateParam1>
            </templateParams>
          </dataType>
          <isExtern>false</isExtern>
          <startCppNs>namespace ngrest {
</startCppNs>
          <endCppNs>}
</endCppNs>
          <options/>
        </typedef>
      </typedefs>
      <services>
        <service>
          <name>TestService</name>
          <ns>::ngrest::</ns>
          <nsName>::ngrest::TestService</nsName>
          <serviceNs>ngrest.</serviceNs>
          <serviceNsName>ngrest.TestService</serviceNsName>
          <description/>
          <details/>
          <options>
            <location>ngrest/test</location>
          </options>
          <modules/>
          <operations>
            <operation>
              <name>get</name>
              <description/>
              <details/>
              <isConst>true</isConst>
              <const> const</const>
              <isAsynch>false</isAsynch>
              <options/>
              <params/>
              <return>bool
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>bool</usedName>
                <name>bool</name>
                <nsName>bool</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>bool</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>echoSync</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <resultElement>resultValue</resultElement>
              </options>
              <params>const std::string&amp; value
                <param>
                  <name>value</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::string&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::string&amp;</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>const std::string&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>std::string
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::string</usedName>
                <name>string</name>
                <nsName>std::string</nsName>
                <ns>std::</ns>
                <type>string</type>
                <usedTypedef>std::string</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>echoASync</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>true</isAsynch>
              <options/>
              <params>const std::string&amp; value, ngrest::Callback&lt;const std::string&amp;&gt;&amp; callback
                <param>
                  <name>value</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::string&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::string&amp;</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>const std::string&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
                <param>
                  <name>callback</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>ngrest::Callback&lt;const std::string&amp;&gt;&amp;
                    <isConst>false</isConst>
                    <isRef>true</isRef>
                    <usedName>ngrest::Callback&lt;const std::string&amp;&gt;&amp;</usedName>
                    <name>Callback</name>
                    <nsName>ngrest::Callback&lt;const std::string&amp;&gt;</nsName>
                    <ns>ngrest::</ns>
                    <type>template</type>
                    <usedTypedef>ngrest::Callback&lt;const std::string&amp;&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>const std::string&amp;
                        <isConst>true</isConst>
                        <isRef>true</isRef>
                        <usedName>const std::string&amp;</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>const std::string&amp;</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>void
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>void</usedName>
                <name>void</name>
                <nsName>void</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>void</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>largeResponse</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params/>
              <return>std::string
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::string</usedName>
                <name>string</name>
                <nsName>std::string</nsName>
                <ns>std::</ns>
                <type>string</type>
                <usedTypedef>std::string</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>add</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>int a, int b
                <param>
                  <name>a</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
                <param>
                  <name>b</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>int
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>int</usedName>
                <name>int</name>
                <nsName>int</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>int</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>set</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>bool val
                <param>
                  <name>val</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>bool
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>bool</usedName>
                    <name>bool</name>
                    <nsName>bool</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>bool</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>void
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>void</usedName>
                <name>void</name>
                <nsName>void</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>void</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>notify</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params/>
              <return>void
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>void</usedName>
                <name>void</name>
                <nsName>void</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>void</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>test</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <location>theTest</location>
                <method>PUT</method>
              </options>
              <params>const Test&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const ::ngrest::Test&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>Test</usedName>
                    <name>Test</name>
                    <nsName>::ngrest::Test</nsName>
                    <ns>::ngrest::</ns>
                    <type>struct</type>
                    <usedTypedef>const Test&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::Test
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>Test</usedName>
                <name>Test</name>
                <nsName>::ngrest::Test</nsName>
                <ns>::ngrest::</ns>
                <type>struct</type>
                <usedTypedef>Test</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListStr</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::list&lt;std::string&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt;std::string&gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt;std::string&gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt;std::string&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt;std::string&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt;std::string&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt;std::string&gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt;std::string&gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt;std::string&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templList</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::list&lt;int&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt;int&gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt;int&gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt;int&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt;int&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt;int&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt;int&gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt;int&gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt;int&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templVector</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::vector&lt;int&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::vector&lt;int&gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::vector&lt;int&gt;&amp;</usedName>
                    <name>vector</name>
                    <nsName>std::vector&lt;int&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::vector&lt;int&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::vector&lt;int&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::vector&lt;int&gt;</usedName>
                <name>vector</name>
                <nsName>std::vector&lt;int&gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::vector&lt;int&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListOfStruct</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::list&lt;Test&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt; ::ngrest::Test &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt;Test&gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; ::ngrest::Test &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt;Test&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>::ngrest::Test
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>Test</usedName>
                        <name>Test</name>
                        <nsName>::ngrest::Test</nsName>
                        <ns>::ngrest::</ns>
                        <type>struct</type>
                        <usedTypedef>Test</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt; ::ngrest::Test &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt;Test&gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt; ::ngrest::Test &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt;Test&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>::ngrest::Test
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>Test</usedName>
                    <name>Test</name>
                    <nsName>::ngrest::Test</nsName>
                    <ns>::ngrest::</ns>
                    <type>struct</type>
                    <usedTypedef>Test</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListOfTypedef</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::list&lt; ::ngrest::TestTypedef &gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt; ::ngrest::TestTypedef &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt; ::ngrest::TestTypedef &gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; ::ngrest::TestTypedef &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt; ::ngrest::TestTypedef &gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>::ngrest::TestTypedef
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>::ngrest::TestTypedef</usedName>
                        <name>TestTypedef</name>
                        <nsName>::ngrest::TestTypedef</nsName>
                        <ns>::ngrest::</ns>
                        <type>typedef</type>
                        <usedTypedef>::ngrest::TestTypedef</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt; ::ngrest::TestTypedef &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt; ::ngrest::TestTypedef &gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt; ::ngrest::TestTypedef &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt; ::ngrest::TestTypedef &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>::ngrest::TestTypedef
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>::ngrest::TestTypedef</usedName>
                    <name>TestTypedef</name>
                    <nsName>::ngrest::TestTypedef</nsName>
                    <ns>::ngrest::</ns>
                    <type>typedef</type>
                    <usedTypedef>::ngrest::TestTypedef</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListOfTypedefList</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const ::ngrest::StringList&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const ::ngrest::StringList&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const ::ngrest::StringList&amp;</usedName>
                    <name>StringList</name>
                    <nsName>::ngrest::StringList</nsName>
                    <ns>::ngrest::</ns>
                    <type>typedef</type>
                    <usedTypedef>const ::ngrest::StringList&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::StringList
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>::ngrest::StringList</usedName>
                <name>StringList</name>
                <nsName>::ngrest::StringList</nsName>
                <ns>::ngrest::</ns>
                <type>typedef</type>
                <usedTypedef>::ngrest::StringList</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListList</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::list&lt; std::list&lt;int&gt; &gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt; std::list&lt;int&gt; &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt; std::list&lt;int&gt; &gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; std::list&lt;int&gt; &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt; std::list&lt;int&gt; &gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::list&lt;int&gt;
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::list&lt;int&gt;</usedName>
                        <name>list</name>
                        <nsName>std::list&lt;int&gt;</nsName>
                        <ns>std::</ns>
                        <type>template</type>
                        <usedTypedef>std::list&lt;int&gt;</usedTypedef>
                        <templateParams>
                          <templateParam1>int
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>int</usedName>
                            <name>int</name>
                            <nsName>int</nsName>
                            <ns/>
                            <type>generic</type>
                            <usedTypedef>int</usedTypedef>
                            <templateParams/>
                          </templateParam1>
                        </templateParams>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt; std::list&lt;int&gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt; std::list&lt;int&gt; &gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt; std::list&lt;int&gt; &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt; std::list&lt;int&gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::list&lt;int&gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::list&lt;int&gt;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt;int&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::list&lt;int&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListListString</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::list&lt; std::list&lt;std::string&gt; &gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt; std::list&lt;std::string&gt; &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt; std::list&lt;std::string&gt; &gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; std::list&lt;std::string&gt; &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt; std::list&lt;std::string&gt; &gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::list&lt;std::string&gt;
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::list&lt;std::string&gt;</usedName>
                        <name>list</name>
                        <nsName>std::list&lt;std::string&gt;</nsName>
                        <ns>std::</ns>
                        <type>template</type>
                        <usedTypedef>std::list&lt;std::string&gt;</usedTypedef>
                        <templateParams>
                          <templateParam1>std::string
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>std::string</usedName>
                            <name>string</name>
                            <nsName>std::string</nsName>
                            <ns>std::</ns>
                            <type>string</type>
                            <usedTypedef>std::string</usedTypedef>
                            <templateParams/>
                          </templateParam1>
                        </templateParams>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt; std::list&lt;std::string&gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt; std::list&lt;std::string&gt; &gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt; std::list&lt;std::string&gt; &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt; std::list&lt;std::string&gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::list&lt;std::string&gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::list&lt;std::string&gt;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt;std::string&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::list&lt;std::string&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListListStruct</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::list&lt; std::list&lt;Test&gt; &gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt; std::list&lt; ::ngrest::Test &gt; &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt; std::list&lt;Test&gt; &gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; std::list&lt; ::ngrest::Test &gt; &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt; std::list&lt;Test&gt; &gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::list&lt; ::ngrest::Test &gt;
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::list&lt;Test&gt;</usedName>
                        <name>list</name>
                        <nsName>std::list&lt; ::ngrest::Test &gt;</nsName>
                        <ns>std::</ns>
                        <type>template</type>
                        <usedTypedef>std::list&lt;Test&gt;</usedTypedef>
                        <templateParams>
                          <templateParam1>::ngrest::Test
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>Test</usedName>
                            <name>Test</name>
                            <nsName>::ngrest::Test</nsName>
                            <ns>::ngrest::</ns>
                            <type>struct</type>
                            <usedTypedef>Test</usedTypedef>
                            <templateParams/>
                          </templateParam1>
                        </templateParams>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt; std::list&lt; ::ngrest::Test &gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt; std::list&lt;Test&gt; &gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt; std::list&lt; ::ngrest::Test &gt; &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt; std::list&lt;Test&gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::list&lt; ::ngrest::Test &gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::list&lt;Test&gt;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; ::ngrest::Test &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::list&lt;Test&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>::ngrest::Test
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>Test</usedName>
                        <name>Test</name>
                        <nsName>::ngrest::Test</nsName>
                        <ns>::ngrest::</ns>
                        <type>struct</type>
                        <usedTypedef>Test</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListListTypedef</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::list&lt; std::list&lt; ::ngrest::TestTypedef &gt; &gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt; std::list&lt; ::ngrest::TestTypedef &gt; &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt; std::list&lt; ::ngrest::TestTypedef &gt; &gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; std::list&lt; ::ngrest::TestTypedef &gt; &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt; std::list&lt; ::ngrest::TestTypedef &gt; &gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::list&lt; ::ngrest::TestTypedef &gt;
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::list&lt; ::ngrest::TestTypedef &gt;</usedName>
                        <name>list</name>
                        <nsName>std::list&lt; ::ngrest::TestTypedef &gt;</nsName>
                        <ns>std::</ns>
                        <type>template</type>
                        <usedTypedef>std::list&lt; ::ngrest::TestTypedef &gt;</usedTypedef>
                        <templateParams>
                          <templateParam1>::ngrest::TestTypedef
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>::ngrest::TestTypedef</usedName>
                            <name>TestTypedef</name>
                            <nsName>::ngrest::TestTypedef</nsName>
                            <ns>::ngrest::</ns>
                            <type>typedef</type>
                            <usedTypedef>::ngrest::TestTypedef</usedTypedef>
                            <templateParams/>
                          </templateParam1>
                        </templateParams>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt; std::list&lt; ::ngrest::TestTypedef &gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt; std::list&lt; ::ngrest::TestTypedef &gt; &gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt; std::list&lt; ::ngrest::TestTypedef &gt; &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt; std::list&lt; ::ngrest::TestTypedef &gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::list&lt; ::ngrest::TestTypedef &gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::list&lt; ::ngrest::TestTypedef &gt;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; ::ngrest::TestTypedef &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::list&lt; ::ngrest::TestTypedef &gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>::ngrest::TestTypedef
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>::ngrest::TestTypedef</usedName>
                        <name>TestTypedef</name>
                        <nsName>::ngrest::TestTypedef</nsName>
                        <ns>::ngrest::</ns>
                        <type>typedef</type>
                        <usedTypedef>::ngrest::TestTypedef</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListListList</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::list&lt; std::list&lt; std::list&lt;int&gt; &gt; &gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt; std::list&lt; std::list&lt;int&gt; &gt; &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt; std::list&lt; std::list&lt;int&gt; &gt; &gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; std::list&lt; std::list&lt;int&gt; &gt; &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt; std::list&lt; std::list&lt;int&gt; &gt; &gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::list&lt; std::list&lt;int&gt; &gt;
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::list&lt; std::list&lt;int&gt; &gt;</usedName>
                        <name>list</name>
                        <nsName>std::list&lt; std::list&lt;int&gt; &gt;</nsName>
                        <ns>std::</ns>
                        <type>template</type>
                        <usedTypedef>std::list&lt; std::list&lt;int&gt; &gt;</usedTypedef>
                        <templateParams>
                          <templateParam1>std::list&lt;int&gt;
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>std::list&lt;int&gt;</usedName>
                            <name>list</name>
                            <nsName>std::list&lt;int&gt;</nsName>
                            <ns>std::</ns>
                            <type>template</type>
                            <usedTypedef>std::list&lt;int&gt;</usedTypedef>
                            <templateParams>
                              <templateParam1>int
                                <isConst>false</isConst>
                                <isRef>false</isRef>
                                <usedName>int</usedName>
                                <name>int</name>
                                <nsName>int</nsName>
                                <ns/>
                                <type>generic</type>
                                <usedTypedef>int</usedTypedef>
                                <templateParams/>
                              </templateParam1>
                            </templateParams>
                          </templateParam1>
                        </templateParams>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt; std::list&lt; std::list&lt;int&gt; &gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt; std::list&lt; std::list&lt;int&gt; &gt; &gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt; std::list&lt; std::list&lt;int&gt; &gt; &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt; std::list&lt; std::list&lt;int&gt; &gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::list&lt; std::list&lt;int&gt; &gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::list&lt; std::list&lt;int&gt; &gt;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; std::list&lt;int&gt; &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::list&lt; std::list&lt;int&gt; &gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::list&lt;int&gt;
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::list&lt;int&gt;</usedName>
                        <name>list</name>
                        <nsName>std::list&lt;int&gt;</nsName>
                        <ns>std::</ns>
                        <type>template</type>
                        <usedTypedef>std::list&lt;int&gt;</usedTypedef>
                        <templateParams>
                          <templateParam1>int
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>int</usedName>
                            <name>int</name>
                            <nsName>int</nsName>
                            <ns/>
                            <type>generic</type>
                            <usedTypedef>int</usedTypedef>
                            <templateParams/>
                          </templateParam1>
                        </templateParams>
                      </templateParam1>
                    </templateParams>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templMapInt</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::map&lt;int, std::string&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::map&lt;int, std::string&gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::map&lt;int, std::string&gt;&amp;</usedName>
                    <name>map</name>
                    <nsName>std::map&lt;int, std::string&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::map&lt;int, std::string&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                      <templateParam2>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam2>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::map&lt;int, std::string&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::map&lt;int, std::string&gt;</usedName>
                <name>map</name>
                <nsName>std::map&lt;int, std::string&gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::map&lt;int, std::string&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                  <templateParam2>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam2>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templMapEnum</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::map&lt;ValType, std::string&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::map&lt; ::ngrest::ValType, std::string &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::map&lt;ValType, std::string&gt;&amp;</usedName>
                    <name>map</name>
                    <nsName>std::map&lt; ::ngrest::ValType, std::string &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::map&lt;ValType, std::string&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>::ngrest::ValType
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>ValType</usedName>
                        <name>ValType</name>
                        <nsName>::ngrest::ValType</nsName>
                        <ns>::ngrest::</ns>
                        <type>enum</type>
                        <usedTypedef>ValType</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                      <templateParam2>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam2>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::map&lt; ::ngrest::ValType, std::string &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::map&lt;ValType, std::string&gt;</usedName>
                <name>map</name>
                <nsName>std::map&lt; ::ngrest::ValType, std::string &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::map&lt;ValType, std::string&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>::ngrest::ValType
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ValType</usedName>
                    <name>ValType</name>
                    <nsName>::ngrest::ValType</nsName>
                    <ns>::ngrest::</ns>
                    <type>enum</type>
                    <usedTypedef>ValType</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                  <templateParam2>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam2>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templMapStr</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::map&lt;std::string, std::string&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::map&lt;std::string, std::string&gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::map&lt;std::string, std::string&gt;&amp;</usedName>
                    <name>map</name>
                    <nsName>std::map&lt;std::string, std::string&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::map&lt;std::string, std::string&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                      <templateParam2>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam2>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::map&lt;std::string, std::string&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::map&lt;std::string, std::string&gt;</usedName>
                <name>map</name>
                <nsName>std::map&lt;std::string, std::string&gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::map&lt;std::string, std::string&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                  <templateParam2>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam2>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templMapStrMapStrStr</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;&amp;</usedName>
                    <name>map</name>
                    <nsName>std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                      <templateParam2>std::map&lt;std::string, std::string&gt;
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::map&lt;std::string, std::string&gt;</usedName>
                        <name>map</name>
                        <nsName>std::map&lt;std::string, std::string&gt;</nsName>
                        <ns>std::</ns>
                        <type>template</type>
                        <usedTypedef>std::map&lt;std::string, std::string&gt;</usedTypedef>
                        <templateParams>
                          <templateParam1>std::string
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>std::string</usedName>
                            <name>string</name>
                            <nsName>std::string</nsName>
                            <ns>std::</ns>
                            <type>string</type>
                            <usedTypedef>std::string</usedTypedef>
                            <templateParams/>
                          </templateParam1>
                          <templateParam2>std::string
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>std::string</usedName>
                            <name>string</name>
                            <nsName>std::string</nsName>
                            <ns>std::</ns>
                            <type>string</type>
                            <usedTypedef>std::string</usedTypedef>
                            <templateParams/>
                          </templateParam2>
                        </templateParams>
                      </templateParam2>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;</usedName>
                <name>map</name>
                <nsName>std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::map&lt; std::string, std::map&lt;std::string, std::string&gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                  <templateParam2>std::map&lt;std::string, std::string&gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::map&lt;std::string, std::string&gt;</usedName>
                    <name>map</name>
                    <nsName>std::map&lt;std::string, std::string&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::map&lt;std::string, std::string&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                      <templateParam2>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam2>
                    </templateParams>
                  </templateParam2>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>testTypedef</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const ::ngrest::StringMap&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const ::ngrest::StringMap&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const ::ngrest::StringMap&amp;</usedName>
                    <name>StringMap</name>
                    <nsName>::ngrest::StringMap</nsName>
                    <ns>::ngrest::</ns>
                    <type>typedef</type>
                    <usedTypedef>const ::ngrest::StringMap&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::StringMap
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>::ngrest::StringMap</usedName>
                <name>StringMap</name>
                <nsName>::ngrest::StringMap</nsName>
                <ns>::ngrest::</ns>
                <type>typedef</type>
                <usedTypedef>::ngrest::StringMap</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>testEnum</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>ValType arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>::ngrest::ValType
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ValType</usedName>
                    <name>ValType</name>
                    <nsName>::ngrest::ValType</nsName>
                    <ns>::ngrest::</ns>
                    <type>enum</type>
                    <usedTypedef>ValType</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::ValType
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ValType</usedName>
                <name>ValType</name>
                <nsName>::ngrest::ValType</nsName>
                <ns>::ngrest::</ns>
                <type>enum</type>
                <usedTypedef>ValType</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>testNestedEnum</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>Test::TestEnum arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>::ngrest::Test::TestEnum
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>Test::TestEnum</usedName>
                    <name>Test::TestEnum</name>
                    <nsName>::ngrest::Test::TestEnum</nsName>
                    <ns>::ngrest::</ns>
                    <type>enum</type>
                    <usedTypedef>Test::TestEnum</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::Test::TestEnum
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>Test::TestEnum</usedName>
                <name>Test::TestEnum</name>
                <nsName>::ngrest::Test::TestEnum</nsName>
                <ns>::ngrest::</ns>
                <type>enum</type>
                <usedTypedef>Test::TestEnum</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>testNestedStruct</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>Test::Nested arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>::ngrest::Test::Nested
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>Test::Nested</usedName>
                    <name>Test::Nested</name>
                    <nsName>::ngrest::Test::Nested</nsName>
                    <ns>::ngrest::</ns>
                    <type>struct</type>
                    <usedTypedef>Test::Nested</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::Test::Nested
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>Test::Nested</usedName>
                <name>Test::Nested</name>
                <nsName>::ngrest::Test::Nested</nsName>
                <ns>::ngrest::</ns>
                <type>struct</type>
                <usedTypedef>Test::Nested</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrInt</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>ngrest::Nullable&lt;int&gt; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>ngrest::Nullable&lt;int&gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ngrest::Nullable&lt;int&gt;</usedName>
                    <name>Nullable</name>
                    <nsName>ngrest::Nullable&lt;int&gt;</nsName>
                    <ns>ngrest::</ns>
                    <type>template</type>
                    <usedTypedef>ngrest::Nullable&lt;int&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>ngrest::Nullable&lt;int&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;int&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt;int&gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;int&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrIntConst</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const ngrest::Nullable&lt;int&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const ngrest::Nullable&lt;int&gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const ngrest::Nullable&lt;int&gt;&amp;</usedName>
                    <name>Nullable</name>
                    <nsName>ngrest::Nullable&lt;int&gt;</nsName>
                    <ns>ngrest::</ns>
                    <type>template</type>
                    <usedTypedef>const ngrest::Nullable&lt;int&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>ngrest::Nullable&lt;int&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;int&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt;int&gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;int&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrString</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>ngrest::Nullable&lt;std::string&gt; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>ngrest::Nullable&lt;std::string&gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ngrest::Nullable&lt;std::string&gt;</usedName>
                    <name>Nullable</name>
                    <nsName>ngrest::Nullable&lt;std::string&gt;</nsName>
                    <ns>ngrest::</ns>
                    <type>template</type>
                    <usedTypedef>ngrest::Nullable&lt;std::string&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>ngrest::Nullable&lt;std::string&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;std::string&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt;std::string&gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;std::string&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrEnum</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>ngrest::Nullable&lt;ValType&gt; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>ngrest::Nullable&lt; ::ngrest::ValType &gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ngrest::Nullable&lt;ValType&gt;</usedName>
                    <name>Nullable</name>
                    <nsName>ngrest::Nullable&lt; ::ngrest::ValType &gt;</nsName>
                    <ns>ngrest::</ns>
                    <type>template</type>
                    <usedTypedef>ngrest::Nullable&lt;ValType&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>::ngrest::ValType
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>ValType</usedName>
                        <name>ValType</name>
                        <nsName>::ngrest::ValType</nsName>
                        <ns>::ngrest::</ns>
                        <type>enum</type>
                        <usedTypedef>ValType</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>ngrest::Nullable&lt; ::ngrest::ValType &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;ValType&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt; ::ngrest::ValType &gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;ValType&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>::ngrest::ValType
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ValType</usedName>
                    <name>ValType</name>
                    <nsName>::ngrest::ValType</nsName>
                    <ns>::ngrest::</ns>
                    <type>enum</type>
                    <usedTypedef>ValType</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrStruct</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>ngrest::Nullable&lt;Test&gt; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>ngrest::Nullable&lt; ::ngrest::Test &gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ngrest::Nullable&lt;Test&gt;</usedName>
                    <name>Nullable</name>
                    <nsName>ngrest::Nullable&lt; ::ngrest::Test &gt;</nsName>
                    <ns>ngrest::</ns>
                    <type>template</type>
                    <usedTypedef>ngrest::Nullable&lt;Test&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>::ngrest::Test
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>Test</usedName>
                        <name>Test</name>
                        <nsName>::ngrest::Test</nsName>
                        <ns>::ngrest::</ns>
                        <type>struct</type>
                        <usedTypedef>Test</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>ngrest::Nullable&lt; ::ngrest::Test &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;Test&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt; ::ngrest::Test &gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;Test&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>::ngrest::Test
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>Test</usedName>
                    <name>Test</name>
                    <nsName>::ngrest::Test</nsName>
                    <ns>::ngrest::</ns>
                    <type>struct</type>
                    <usedTypedef>Test</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrStructList</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>ngrest::Nullable&lt; std::list&lt;Test&gt; &gt; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>ngrest::Nullable&lt; std::list&lt; ::ngrest::Test &gt; &gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ngrest::Nullable&lt; std::list&lt;Test&gt; &gt;</usedName>
                    <name>Nullable</name>
                    <nsName>ngrest::Nullable&lt; std::list&lt; ::ngrest::Test &gt; &gt;</nsName>
                    <ns>ngrest::</ns>
                    <type>template</type>
                    <usedTypedef>ngrest::Nullable&lt; std::list&lt;Test&gt; &gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::list&lt; ::ngrest::Test &gt;
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::list&lt;Test&gt;</usedName>
                        <name>list</name>
                        <nsName>std::list&lt; ::ngrest::Test &gt;</nsName>
                        <ns>std::</ns>
                        <type>template</type>
                        <usedTypedef>std::list&lt;Test&gt;</usedTypedef>
                        <templateParams>
                          <templateParam1>::ngrest::Test
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>Test</usedName>
                            <name>Test</name>
                            <nsName>::ngrest::Test</nsName>
                            <ns>::ngrest::</ns>
                            <type>struct</type>
                            <usedTypedef>Test</usedTypedef>
                            <templateParams/>
                          </templateParam1>
                        </templateParams>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>ngrest::Nullable&lt; std::list&lt; ::ngrest::Test &gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt; std::list&lt;Test&gt; &gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt; std::list&lt; ::ngrest::Test &gt; &gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt; std::list&lt;Test&gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::list&lt; ::ngrest::Test &gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::list&lt;Test&gt;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; ::ngrest::Test &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::list&lt;Test&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>::ngrest::Test
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>Test</usedName>
                        <name>Test</name>
                        <nsName>::ngrest::Test</nsName>
                        <ns>::ngrest::</ns>
                        <type>struct</type>
                        <usedTypedef>Test</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrNull</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params/>
              <return>::ngrest::TestPtr
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>TestPtr</usedName>
                <name>TestPtr</name>
                <nsName>::ngrest::TestPtr</nsName>
                <ns>::ngrest::</ns>
                <type>struct</type>
                <usedTypedef>TestPtr</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrNotNull</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params/>
              <return>::ngrest::TestPtr
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>TestPtr</usedName>
                <name>TestPtr</name>
                <nsName>::ngrest::TestPtr</nsName>
                <ns>::ngrest::</ns>
                <type>struct</type>
                <usedTypedef>TestPtr</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrTest</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const TestPtr&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const ::ngrest::TestPtr&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>TestPtr</usedName>
                    <name>TestPtr</name>
                    <nsName>::ngrest::TestPtr</nsName>
                    <ns>::ngrest::</ns>
                    <type>struct</type>
                    <usedTypedef>const TestPtr&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::TestPtr
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>TestPtr</usedName>
                <name>TestPtr</name>
                <nsName>::ngrest::TestPtr</nsName>
                <ns>::ngrest::</ns>
                <type>struct</type>
                <usedTypedef>TestPtr</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrTestNull</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const ngrest::Nullable&lt;TestPtr&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const ngrest::Nullable&lt; ::ngrest::TestPtr &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const ngrest::Nullable&lt;TestPtr&gt;&amp;</usedName>
                    <name>Nullable</name>
                    <nsName>ngrest::Nullable&lt; ::ngrest::TestPtr &gt;</nsName>
                    <ns>ngrest::</ns>
                    <type>template</type>
                    <usedTypedef>const ngrest::Nullable&lt;TestPtr&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>::ngrest::TestPtr
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>TestPtr</usedName>
                        <name>TestPtr</name>
                        <nsName>::ngrest::TestPtr</nsName>
                        <ns>::ngrest::</ns>
                        <type>struct</type>
                        <usedTypedef>TestPtr</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>ngrest::Nullable&lt; ::ngrest::TestPtr &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;TestPtr&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt; ::ngrest::TestPtr &gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;TestPtr&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>::ngrest::TestPtr
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>TestPtr</usedName>
                    <name>TestPtr</name>
                    <nsName>::ngrest::TestPtr</nsName>
                    <ns>::ngrest::</ns>
                    <type>struct</type>
                    <usedTypedef>TestPtr</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>getInline</name>
              <description/>
              <details/>
              <isConst>true</isConst>
              <const> const</const>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params/>
              <return>bool
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>bool</usedName>
                <name>bool</name>
                <nsName>bool</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>bool</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>echoSyncInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>const std::string&amp; value
                <param>
                  <name>value</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::string&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::string&amp;</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>const std::string&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>std::string
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::string</usedName>
                <name>string</name>
                <nsName>std::string</nsName>
                <ns>std::</ns>
                <type>string</type>
                <usedTypedef>std::string</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>addInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>int a, int b
                <param>
                  <name>a</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
                <param>
                  <name>b</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>int
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>int</usedName>
                <name>int</name>
                <nsName>int</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>int</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>notifyInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params/>
              <return>void
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>void</usedName>
                <name>void</name>
                <nsName>void</nsName>
                <ns/>
                <type>generic</type>
                <usedTypedef>void</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>testInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
                <location>theTestInline</location>
                <method>PUT</method>
              </options>
              <params>const Test&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const ::ngrest::Test&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>Test</usedName>
                    <name>Test</name>
                    <nsName>::ngrest::Test</nsName>
                    <ns>::ngrest::</ns>
                    <type>struct</type>
                    <usedTypedef>const Test&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::Test
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>Test</usedName>
                <name>Test</name>
                <nsName>::ngrest::Test</nsName>
                <ns>::ngrest::</ns>
                <type>struct</type>
                <usedTypedef>Test</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListStrInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>const std::list&lt;std::string&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt;std::string&gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt;std::string&gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt;std::string&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt;std::string&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt;std::string&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt;std::string&gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt;std::string&gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt;std::string&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templVectorInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>const std::vector&lt;int&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::vector&lt;int&gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::vector&lt;int&gt;&amp;</usedName>
                    <name>vector</name>
                    <nsName>std::vector&lt;int&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::vector&lt;int&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::vector&lt;int&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::vector&lt;int&gt;</usedName>
                <name>vector</name>
                <nsName>std::vector&lt;int&gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::vector&lt;int&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListOfTypedefListInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>const ::ngrest::StringList&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const ::ngrest::StringList&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const ::ngrest::StringList&amp;</usedName>
                    <name>StringList</name>
                    <nsName>::ngrest::StringList</nsName>
                    <ns>::ngrest::</ns>
                    <type>typedef</type>
                    <usedTypedef>const ::ngrest::StringList&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::StringList
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>::ngrest::StringList</usedName>
                <name>StringList</name>
                <nsName>::ngrest::StringList</nsName>
                <ns>::ngrest::</ns>
                <type>typedef</type>
                <usedTypedef>::ngrest::StringList</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templListListInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>const std::list&lt; std::list&lt;int&gt; &gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::list&lt; std::list&lt;int&gt; &gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::list&lt; std::list&lt;int&gt; &gt;&amp;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt; std::list&lt;int&gt; &gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::list&lt; std::list&lt;int&gt; &gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>std::list&lt;int&gt;
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::list&lt;int&gt;</usedName>
                        <name>list</name>
                        <nsName>std::list&lt;int&gt;</nsName>
                        <ns>std::</ns>
                        <type>template</type>
                        <usedTypedef>std::list&lt;int&gt;</usedTypedef>
                        <templateParams>
                          <templateParam1>int
                            <isConst>false</isConst>
                            <isRef>false</isRef>
                            <usedName>int</usedName>
                            <name>int</name>
                            <nsName>int</nsName>
                            <ns/>
                            <type>generic</type>
                            <usedTypedef>int</usedTypedef>
                            <templateParams/>
                          </templateParam1>
                        </templateParams>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::list&lt; std::list&lt;int&gt; &gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::list&lt; std::list&lt;int&gt; &gt;</usedName>
                <name>list</name>
                <nsName>std::list&lt; std::list&lt;int&gt; &gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::list&lt; std::list&lt;int&gt; &gt;</usedTypedef>
                <templateParams>
                  <templateParam1>std::list&lt;int&gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::list&lt;int&gt;</usedName>
                    <name>list</name>
                    <nsName>std::list&lt;int&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>std::list&lt;int&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>templMapIntInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>const std::map&lt;int, std::string&gt;&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::map&lt;int, std::string&gt;&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::map&lt;int, std::string&gt;&amp;</usedName>
                    <name>map</name>
                    <nsName>std::map&lt;int, std::string&gt;</nsName>
                    <ns>std::</ns>
                    <type>template</type>
                    <usedTypedef>const std::map&lt;int, std::string&gt;&amp;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                      <templateParam2>std::string
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>std::string</usedName>
                        <name>string</name>
                        <nsName>std::string</nsName>
                        <ns>std::</ns>
                        <type>string</type>
                        <usedTypedef>std::string</usedTypedef>
                        <templateParams/>
                      </templateParam2>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>std::map&lt;int, std::string&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::map&lt;int, std::string&gt;</usedName>
                <name>map</name>
                <nsName>std::map&lt;int, std::string&gt;</nsName>
                <ns>std::</ns>
                <type>template</type>
                <usedTypedef>std::map&lt;int, std::string&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                  <templateParam2>std::string
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>std::string</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>std::string</usedTypedef>
                    <templateParams/>
                  </templateParam2>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>testTypedefInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>const ::ngrest::StringMap&amp; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const ::ngrest::StringMap&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const ::ngrest::StringMap&amp;</usedName>
                    <name>StringMap</name>
                    <nsName>::ngrest::StringMap</nsName>
                    <ns>::ngrest::</ns>
                    <type>typedef</type>
                    <usedTypedef>const ::ngrest::StringMap&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::StringMap
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>::ngrest::StringMap</usedName>
                <name>StringMap</name>
                <nsName>::ngrest::StringMap</nsName>
                <ns>::ngrest::</ns>
                <type>typedef</type>
                <usedTypedef>::ngrest::StringMap</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>testEnumInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>ValType arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>::ngrest::ValType
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ValType</usedName>
                    <name>ValType</name>
                    <nsName>::ngrest::ValType</nsName>
                    <ns>::ngrest::</ns>
                    <type>enum</type>
                    <usedTypedef>ValType</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::ValType
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ValType</usedName>
                <name>ValType</name>
                <nsName>::ngrest::ValType</nsName>
                <ns>::ngrest::</ns>
                <type>enum</type>
                <usedTypedef>ValType</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>testNestedEnumInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>Test::TestEnum arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>::ngrest::Test::TestEnum
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>Test::TestEnum</usedName>
                    <name>Test::TestEnum</name>
                    <nsName>::ngrest::Test::TestEnum</nsName>
                    <ns>::ngrest::</ns>
                    <type>enum</type>
                    <usedTypedef>Test::TestEnum</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::Test::TestEnum
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>Test::TestEnum</usedName>
                <name>Test::TestEnum</name>
                <nsName>::ngrest::Test::TestEnum</nsName>
                <ns>::ngrest::</ns>
                <type>enum</type>
                <usedTypedef>Test::TestEnum</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>testNestedStructInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>Test::Nested arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>::ngrest::Test::Nested
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>Test::Nested</usedName>
                    <name>Test::Nested</name>
                    <nsName>::ngrest::Test::Nested</nsName>
                    <ns>::ngrest::</ns>
                    <type>struct</type>
                    <usedTypedef>Test::Nested</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>::ngrest::Test::Nested
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>Test::Nested</usedName>
                <name>Test::Nested</name>
                <nsName>::ngrest::Test::Nested</nsName>
                <ns>::ngrest::</ns>
                <type>struct</type>
                <usedTypedef>Test::Nested</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>ptrIntInline</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <inlineResult>true</inlineResult>
              </options>
              <params>ngrest::Nullable&lt;int&gt; arg
                <param>
                  <name>arg</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>ngrest::Nullable&lt;int&gt;
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>ngrest::Nullable&lt;int&gt;</usedName>
                    <name>Nullable</name>
                    <nsName>ngrest::Nullable&lt;int&gt;</nsName>
                    <ns>ngrest::</ns>
                    <type>template</type>
                    <usedTypedef>ngrest::Nullable&lt;int&gt;</usedTypedef>
                    <templateParams>
                      <templateParam1>int
                        <isConst>false</isConst>
                        <isRef>false</isRef>
                        <usedName>int</usedName>
                        <name>int</name>
                        <nsName>int</nsName>
                        <ns/>
                        <type>generic</type>
                        <usedTypedef>int</usedTypedef>
                        <templateParams/>
                      </templateParam1>
                    </templateParams>
                  </dataType>
                </param>
              </params>
              <return>ngrest::Nullable&lt;int&gt;
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>ngrest::Nullable&lt;int&gt;</usedName>
                <name>Nullable</name>
                <nsName>ngrest::Nullable&lt;int&gt;</nsName>
                <ns>ngrest::</ns>
                <type>template</type>
                <usedTypedef>ngrest::Nullable&lt;int&gt;</usedTypedef>
                <templateParams>
                  <templateParam1>int
                    <isConst>false</isConst>
                    <isRef>false</isRef>
                    <usedName>int</usedName>
                    <name>int</name>
                    <nsName>int</nsName>
                    <ns/>
                    <type>generic</type>
                    <usedTypedef>int</usedTypedef>
                    <templateParams/>
                  </templateParam1>
                </templateParams>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>echo</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options/>
              <params>const std::string&amp; value
                <param>
                  <name>value</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::string&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::string&amp;</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>const std::string&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>std::string
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::string</usedName>
                <name>string</name>
                <nsName>std::string</nsName>
                <ns>std::</ns>
                <type>string</type>
                <usedTypedef>std::string</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
            <operation>
              <name>echoPost</name>
              <description/>
              <details/>
              <isConst>false</isConst>
              <const/>
              <isAsynch>false</isAsynch>
              <options>
                <location>echo</location>
                <method>POST</method>
              </options>
              <params>const std::string&amp; value
                <param>
                  <name>value</name>
                  <description/>
                  <details/>
                  <options/>
                  <dataType>const std::string&amp;
                    <isConst>true</isConst>
                    <isRef>true</isRef>
                    <usedName>const std::string&amp;</usedName>
                    <name>string</name>
                    <nsName>std::string</nsName>
                    <ns>std::</ns>
                    <type>string</type>
                    <usedTypedef>const std::string&amp;</usedTypedef>
                    <templateParams/>
                  </dataType>
                </param>
              </params>
              <return>std::string
                <isConst>false</isConst>
                <isRef>false</isRef>
                <usedName>std::string</usedName>
                <name>string</name>
                <nsName>std::string</nsName>
                <ns>std::</ns>
                <type>string</type>
                <usedTypedef>std::string</usedTypedef>
                <templateParams/>
                <responseName/>
              </return>
            </operation>
          </operations>
          <startCppNs>namespace ngrest {
</startCppNs>
          <endCppNs>}
</endCppNs>
        </service>
      </services>
    </interface>
  </interfaces>
</project>