// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest
// DO NOT EDIT. ANY CHANGES WILL BE LOST

#include <ngrest/utils/Log.h>
#include <ngrest/utils/fromcstring.h>
#include <ngrest/utils/tostring.h>
#include <ngrest/utils/Exception.h>
#include <ngrest/common/ObjectModel.h>
#include <ngrest/common/ObjectModelUtils.h>
#include <ngrest/common/Message.h>
#include <ngrest/common/HttpMethod.h>
#include <ngrest/common/Service.h>
#include <ngrest/engine/ServiceDescription.h>
#include "EchoWrapper.h"



namespace ngrest {
namespace examples {


EchoWrapper::EchoWrapper():
    service(new Echo())
{
}

EchoWrapper::~EchoWrapper()
{
    delete service;
}


::ngrest::Service* EchoWrapper::getServiceImpl()
{
    return service;
}

void EchoWrapper::invoke(const ::ngrest::OperationDescription* operation, ::ngrest::MessageContext* context)
{
    if (operation->name == "echoPost") {   //  **************** echoPost *****************

        /// std::string echoPost(const std::string& text);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for ngrest.examples.Echo/echoPost");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        std::string text;

        ::ngrest::ObjectModelUtils::getChildValue(request, "text", text);
/// ######### deserialize request end ###########

        const std::string& result = service->echoPost(text);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else if (operation->name == "echoGet") {   //  **************** echoGet *****************

        /// std::string echoGet(const std::string& text);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for ngrest.examples.Echo/echoGet");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        std::string text;

        ::ngrest::ObjectModelUtils::getChildValue(request, "text", text);
/// ######### deserialize request end ###########

        const std::string& result = service->echoGet(text);

/// ######### serialize response ###########

        ::ngrest::Object* responseNode = context->pool->alloc< ::ngrest::Object>();
        ::ngrest::NamedNode* resultNode = context->pool->alloc< ::ngrest::NamedNode>("result");
        responseNode->firstChild = resultNode;

        resultNode->node = context->pool->alloc< ::ngrest::Value>(::ngrest::ValueType::String, result.c_str());

        context->response->node = responseNode;
/// ######### serialize response end ###########

        context->callback->success();
    } else {
        NGREST_THROW_ASSERT("No operation " + operation->name + " found in service Echo");
    }
}

const ::ngrest::ServiceDescription* EchoWrapper::getDescription() const
{
    static ::ngrest::ServiceDescription description = {
        "ngrest.examples.Echo", // name
        "", // location
        R"(Echo service example)", // description
        R"(by default exposes Echo service relative to base URL: http://server:port/ngrest/examples/Echo)", // details
        {
            {
                "echoPost",             // name
                "echo", // location
                static_cast<int>(::ngrest::HttpMethod::POST),
                "POST",
                false,
                R"(a simple operation "echo")", // description
                R"(example of POST request:
      http://server:port/ngrest/examples/Echo/echo
      -- body -----------------------
      {
        "text": "Hello ngrest!"
      }
      -- end body -------------------)", // details
                {
                    {"text", ::ngrest::ParameterDescription::Type::String, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            },
            {
                "echoGet",             // name
                "echo?text={text}", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"(a simple operation "echo")", // description
                R"(example of GET request:
      http://server:port/ngrest/examples/Echo?text=Hello%20World!)", // details
                {
                    {"text", ::ngrest::ParameterDescription::Type::String, false}
                },
                ::ngrest::ParameterDescription::Type::String, false
            }
        }
    };

    return &description;
}


}
}

