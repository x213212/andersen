// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest
// DO NOT EDIT. ANY CHANGES WILL BE LOST

#include <ngrest/utils/Log.h>
#include <ngrest/utils/fromcstring.h>
#include <ngrest/utils/tostring.h>
#include <ngrest/utils/Exception.h>
#include <ngrest/common/ObjectModel.h>
#include <ngrest/common/ObjectModelUtils.h>
#include <ngrest/common/Message.h>
#include <ngrest/common/HttpMethod.h>
#include <ngrest/common/Service.h>
#include <ngrest/engine/ServiceDescription.h>
#include "ServerStatusWrapper.h"



namespace ngrest {


ServerStatusWrapper::ServerStatusWrapper():
    service(new ServerStatus())
{
}

ServerStatusWrapper::~ServerStatusWrapper()
{
    delete service;
}


::ngrest::Service* ServerStatusWrapper::getServiceImpl()
{
    return service;
}

void ServerStatusWrapper::invoke(const ::ngrest::OperationDescription* operation, ::ngrest::MessageContext* context)
{
    if (operation->name == "getFilters") {   //  **************** getFilters *****************

        /// void getFilters(MessageContext& context);

/// ######### deserialize request ###########


/// ######### deserialize request end ###########

        service->getFilters(*context);

        context->callback->success();
    } else if (operation->name == "getServices") {   //  **************** getServices *****************

        /// void getServices(MessageContext& context);

/// ######### deserialize request ###########


/// ######### deserialize request end ###########

        service->getServices(*context);

        context->callback->success();
    } else if (operation->name == "getService") {   //  **************** getService *****************

        /// void getService(const std::string& name, MessageContext& context);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for ngrest.ServerStatus/getService");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        std::string name;

        ::ngrest::ObjectModelUtils::getChildValue(request, "name", name);
/// ######### deserialize request end ###########

        service->getService(name, *context);

        context->callback->success();
    } else if (operation->name == "getOperation") {   //  **************** getOperation *****************

        /// void getOperation(const std::string& serviceName, const std::string& operationName, MessageContext& context);

/// ######### deserialize request ###########
        NGREST_ASSERT(context->request->node, "Request expected for ngrest.ServerStatus/getOperation");
        NGREST_ASSERT_PARAM(context->request->node->type == ::ngrest::NodeType::Object);

        const ::ngrest::Object* request = static_cast<const ::ngrest::Object*>(context->request->node);

        std::string serviceName;
        std::string operationName;

        ::ngrest::ObjectModelUtils::getChildValue(request, "serviceName", serviceName);
        ::ngrest::ObjectModelUtils::getChildValue(request, "operationName", operationName);
/// ######### deserialize request end ###########

        service->getOperation(serviceName, operationName, *context);

        context->callback->success();
    } else {
        NGREST_THROW_ASSERT("No operation " + operation->name + " found in service ServerStatus");
    }
}

const ::ngrest::ServiceDescription* ServerStatusWrapper::getDescription() const
{
    static ::ngrest::ServiceDescription description = {
        "ngrest.ServerStatus", // name
        "ngrest", // location
        R"(Displays deployed services)", // description
        R"()", // details
        {
            {
                "getFilters",             // name
                "filters", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {

                },
                ::ngrest::ParameterDescription::Type::Undefined, false
            },
            {
                "getServices",             // name
                "services", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {

                },
                ::ngrest::ParameterDescription::Type::Undefined, false
            },
            {
                "getService",             // name
                "service/{name}", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {
                    {"name", ::ngrest::ParameterDescription::Type::String, false}
                },
                ::ngrest::ParameterDescription::Type::Undefined, false
            },
            {
                "getOperation",             // name
                "operation/{serviceName}/{operationName}", // location
                static_cast<int>(::ngrest::HttpMethod::GET),
                "GET",
                false,
                R"()", // description
                R"()", // details
                {
                    {"serviceName", ::ngrest::ParameterDescription::Type::String, false},
                    {"operationName", ::ngrest::ParameterDescription::Type::String, false}
                },
                ::ngrest::ParameterDescription::Type::Undefined, false
            }
        }
    };

    return &description;
}


}

